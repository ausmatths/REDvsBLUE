# Uncomment this line to define a global platform for your project
platform :ios, '15.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  # Pin GoogleSignIn to a version compatible with google_sign_in_ios plugin
  # This resolves CocoaPods conflict where Podfile.lock had 9.x but the plugin requires ~> 8.0
  pod 'GoogleSignIn', '~> 8.0'

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  # Keep Flutter's additional settings for Pods
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end

  # Disable code signing for Debug builds to allow running on iOS Simulator without signing
  # Apply to the app project (Runner and tests)
  installer.aggregate_targets.each do |aggregate_target|
    user_project = aggregate_target.user_project
    user_project.targets.each do |target|
      target.build_configurations.each do |config|
        if config.name == 'Debug'
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        end
      end
    end
  end

  # Also apply to Pods targets (some pods try to code sign in Debug)
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      if config.name == 'Debug'
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
      end
    end
  end

  # Add a pre-build script to strip extended attributes from frameworks to avoid
  # codesign errors like: "resource fork, Finder information, or similar detritus not allowed"
  installer.aggregate_targets.each do |aggregate_target|
    user_project = aggregate_target.user_project
    runner_target = user_project.targets.find { |t| t.name == 'Runner' }
    if runner_target
      phase_name = 'Strip Extended Attributes'
      unless runner_target.shell_script_build_phases.any? { |p| p.name == phase_name }
        phase = runner_target.new_shell_script_build_phase(phase_name)
        phase.shell_script = <<-SCRIPT
set -e
FRAMEWORKS_DIR="${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}"
APP_DIR="${BUILT_PRODUCTS_DIR}/${WRAPPER_NAME}"
if [ -d "${FRAMEWORKS_DIR}" ]; then
  find "${FRAMEWORKS_DIR}" -type d -name "*.framework" -print0 | xargs -0 -I {} xattr -cr "{}" || true
fi
if [ -d "${APP_DIR}" ]; then
  xattr -cr "${APP_DIR}" || true
fi
SCRIPT
        # Ensure the phase runs before Flutter's scripts
        phases = runner_target.build_phases
        phases.delete(phase)
        phases.insert(0, phase)
        user_project.save
      end
    end
  end
end
